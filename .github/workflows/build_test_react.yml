name: Build and Test React Application
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on: 
  push: 
    branches: [ main ]
  pull_request: 
    branches: [ main ]
  workflow_dispatch:
  repository_dispatch:
    types: [dispatch-event]
jobs: 
  build_test:
    permissions: 
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with: 
          node-version: ${{ matrix.node-version }}
      - name: npm ci, build and test
        run: |
          cd my-app
          npm ci
          npm run jsdoc
          npm run build --if-present
          npm test
        env:
          REACT_APP_SERVER_URL: ${{secrets.REACT_APP_SERVER_URL}}
      - name: Build the stack
        run: docker compose up -d
        env: 
          MYSQL_DATABASE: ${{secrets.MYSQL_DATABASE}}
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
          MYSQL_HOST: ${{secrets.MYSQL_HOST}}
          REACT_APP_SERVER_URL: ${{ secrets.REACT_APP_SERVER_URL }}
      - name: Run end-to-end tests with Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: my-app
      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      - name : check version
        run : |
          cd my-app
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          NPM_VERSION=$(npm view ci-cd-ynov version)
          if [ "$LOCAL_VERSION" != "$NPM_VERSION" ]; then
            echo "NEW_VERSION=true" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=false" >> $GITHUB_ENV
          fi
      - name: build and publish package on NPM ðŸ“¦
        working-directory: my-app
        if: env.NEW_VERSION == 'true'
        run: |
          git config --global user.email "elielwotobe@gmail.com"
          git config --global user.name "Eliel"
          npm run build-npm-ci
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with: 
          path: my-app/build
          if-no-files-found: error
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: './my-app/coverage/clover.xml'
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Stop the stack
        run: docker compose down
  deploy:
   environment:
     name: github-pages
     url: ${{steps.deployment.outputs.page_url}}
   runs-on: ubuntu-latest
   permissions:
     pages: write
     id-token: write
   # Add a dependency to the build job
   needs: build_test
   # Specify runner + deployment step
   steps:
     - name: Deploy to GitHub Pages
       id: deployment
       uses: actions/deploy-pages@v4
  deploy_vercel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to prod
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
  trigger-event: 
    runs-on: ubuntu-latest
    needs: deploy_vercel
    steps:
      - name: Declencher terraform
        run: |
          curl -L \
            -X POST \ 
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONNAL_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/SlaveofChrist/repo-terraform/dispatches \
            -d '{"event_type": "dispatch-event"}'